package frc.robot;

import edu.wpi.first.math.geometry.Translation2d;

import edu.wpi.first.math.kinematics.ChassisSpeeds;

import edu.wpi.first.math.kinematics.SwerveDriveKinematics;
import edu.wpi.first.math.kinematics.SwerveDriveOdometry;
import edu.wpi.first.math.kinematics.SwerveModulePosition;

import edu.wpi.first.wpilibj.AnalogGyro;

// intakes from the controller, tells the robot how to drive
public class Drivetrain{
    // max speed for the robot
    public static final double kMaxSpeed = 3.0;

    // max rotation for robot
    public static final double kMaxAngularSpeed = Math.PI;

    // calibrates where the robot knows its 'limbs' are
    private final Translation2d m_frontLeftLocation = new Translation2d(0.381, 0.381);
    private final Translation2d m_frontRightLocation = new Translation2d(0.381, -0.381);

    private final Translation2d m_backLeftLocation = new Translation2d(-0.381, 0.381);
    private final Translation2d m_backRightLocation = new Translation2d(-0.381, -0.381);

    // INTAKES FOR BELOW:
    // driveMotorChannel, turningMotorChannel,
    // driveEncoderChannelA, driveEncoderChannelB,
    // turningEncoderChannelA, turningEncoderChannelB
    // NOTE: 
    // encoderchannels go up by 1 from 0, from the FIRST one that is connected

    private final SwerveModule m_frontRight
        = new SwerveModule(
            2, 1,
            0, 1, 
            2, 3
            );
    
    private final SwerveModule m_frontLeft
        = new SwerveModule(
            4, 3,
            4, 5, 
            6, 7
            );

    private final SwerveModule m_backRight
        = new SwerveModule(
            6, 5,
            8, 9,
            10, 11
            );

    private final SwerveModule m_backLeft
        = new SwerveModule(
            8, 7,
            12, 13,
            14, 15
            );

    private final AnalogGyro m_gyro = new AnalogGyro(0);

    private final SwerveDriveKinematics m_kinematics
        = new SwerveDriveKinematics(
            m_frontLeftLocation, m_frontRightLocation,
            m_backLeftLocation, m_backRightLocation
            );

    private final SwerveDriveOdometry m_odometry
        = new SwerveDriveOdometry(
            m_kinematics,
            m_gyro.getRotation2d(),
            new SwerveModulePosition[] {
                m_frontLeft.getPosition(),
                m_frontRight.getPosition(),
                m_backLeft.getPosition(),
                m_backRight.getPosition()
              });

    /**
     * @param holdup test
     */
    public Drivetrain(String holdup){
        m_gyro.reset();
    }

    /**
     * Method to drive the robot using joystick info.
     *
     * @param xSpeed Speed of the robot in the x direction (forward).
     * @param ySpeed Speed of the robot in the y direction (sideways).
     * @param rot Angular rate of the robot.
     * @param fieldRelative Whether the provided x and y speeds are relative to the field.
     */

    public void Drive(
        double xSpeed, double ySpeed,
        double rot, boolean fieldRelative,
        double periodSeconds
    ){
        // tl;dr
        // if field relative: set the driving x and y speed, rate of rotation, of the robot to field
            // relative speeds
        // otherwise: set the driving x and y speed, rate of rotation, of the robot, directly to
            // the inputs given
        var swerveModuleStates = m_kinematics.toSwerveModuleStates(
            ChassisSpeeds.discretize(fieldRelative 
                ? ChassisSpeeds.fromFieldRelativeSpeeds(
                    xSpeed, ySpeed,
                    rot, m_gyro.getRotation2d()
                    )
                : new ChassisSpeeds(xSpeed, ySpeed, rot), periodSeconds
            )
        );

        System.out.println("swerveModuleStates0: " + swerveModuleStates[0]);

        // renormalizes wheel speeds in case one is faster than needed
        SwerveDriveKinematics.desaturateWheelSpeeds(swerveModuleStates, kMaxSpeed);
        
        m_frontLeft.setDesiredState(swerveModuleStates[0]);
        m_frontRight.setDesiredState(swerveModuleStates[1]);
        m_backLeft.setDesiredState(swerveModuleStates[2]);
        m_backRight.setDesiredState(swerveModuleStates[3]);

        System.out.println("RUNNING DRIVE");

    }

    // updates field relative position of the robot
    public void updateOdometry(){
        m_odometry.update(
            m_gyro.getRotation2d(),
            new SwerveModulePosition[]{
                m_frontLeft.getPosition(),
                m_frontRight.getPosition(),
                m_backLeft.getPosition(),
                m_backRight.getPosition()
            }
        );
    }
}